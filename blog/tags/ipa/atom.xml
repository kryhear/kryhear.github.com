<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: IPA | Kryhear's Blog]]></title>
  <link href="http://kryhear.github.com/blog/tags/ipa/atom.xml" rel="self"/>
  <link href="http://kryhear.github.com/"/>
  <updated>2012-08-16T09:38:10+08:00</updated>
  <id>http://kryhear.github.com/</id>
  <author>
    <name><![CDATA[Kryhear]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[越狱iOS设备利用itms-services协议，实现Safari一键安装IPA]]></title>
    <link href="http://kryhear.github.com/blog/2012/08/14/use-itms-services-install-ipa-to-a-jailbreak-ios-device/"/>
    <updated>2012-08-14T17:24:00+08:00</updated>
    <id>http://kryhear.github.com/blog/2012/08/14/use-itms-services-install-ipa-to-a-jailbreak-ios-device</id>
    <content type="html"><![CDATA[<p>利用MobileInstallation实现IPA程序安装后，最近有网友问起同步推、91等在线一键安装APP的实现，于是这两天抽了时间研究了一下。一开始以为可以通过调用MobileInstallation Framework来安装，仔细想想后，实在不可能通过一网页调用到系统级文件，更别说调用系统私有库里面的方法来安装。最后只好从<a href="http://tui.tongbu.com/jb" title="同步推">同步推</a>等网站入手。</p>

<!-- more -->


<p>此处先描述一下同步推在线一键安装的流程：</p>

<ol>
<li><p>先用iPhone上的Safari打开<a href="http://tui.tongbu.com/jb" title="同步推">同步推</a>，可以看到<code>在线安装</code>的按钮，同时网站也给出了一键安装的条件：<code>安装要求：已越狱，并安装了appsync</code>！如下图示：
<img class="center" src="/images/post/TBT_Install.png" title="同步推在线安装 #安装" ></p></li>
<li><p>点击<code>在线安装</code>后，弹出一个UIAlertView，提示</p>

<blockquote><p>"tui.tongbu.com"要安装“同步推1.12（需越狱）online”</p></blockquote>

<p>  <img class="center" src="/images/post/TBT_Tips.png" title="同步推安装 #提示" ></p></li>
<li><p>点击弹出对话框的<code>安装</code>后，系统自动退回桌面，这时可以看到同步推开始下载并自动安装。</p></li>
</ol>


<p><img class="center" src="/images/post/TBT_Status.jpg" title="同步推安装 #状态" ></p>

<p>以上便是同步推在线一键安装的基本操作流程，不难看出，关键代码应该是在点击<code>在线安装</code>后，网站执行了某个方法后弹出安装提示框。查看网页源代码可以看到<code>在线安装</code>这个位置代码如下：</p>

<p><code>
&lt;a style=" top:0px; left:385px;" class="online" href="javascript:void(0);" title="同步推"
lurl="http://t.tongbu.com/tbtui/tbtui_v1.12.ipa" onclick="return install(this);"&gt;点此安装&lt;/a&gt;
</code></p>

<p>明显点击后，调用了方法install，继续往下则看到install方法的代码：</p>

<p>```
install = function(_target) {</p>

<pre><code>          if (lDGyJ1 == 0) {
              return tbapi_autodl(_target);
          }
          else {
              var gjH_kaqzV1 = "\x68\x74\x74\x70\x3a\x2f\x2f\x73\x65\x72\x76\x65\x72\x2e\x74\x6f\x6e\x67\x62\x75\x2e\x63\x6f\x6d\x2f\x63\x6c\x6f\x75\x64\x2f\x64\x6f\x77\x6e\x61\x70\x70\x2e\x61\x73\x70\x78";
              if (request("\x63\x68\x61\x6e\x6e\x65\x6c") != null)
              { gjH_kaqzV1 = gjH_kaqzV1 + "\x3f\x63\x68\x61\x6e\x6e\x65\x6c\x3d" + request("\x63\x68\x61\x6e\x6e\x65\x6c") };
              $('\x23\x64\x6f\x77\x6e\x46\x72\x61\x6d\x65')["\x61\x74\x74\x72"]("\x73\x72\x63", gjH_kaqzV1);                
              return false;
          }
      }
</code></pre>

<p>```</p>

<p>上述代码被简单加密过，解密后如下</p>

<p>```
install = function(_target) {</p>

<pre><code>          if (lDGyJ1 == 0) {
              return tbapi_autodl(_target);
          }
          else {
              var gjH_kaqzV1 = http://server.tongbu.com/cloud/downapp.aspx;
              if (request(channel) != null)
              { gjH_kaqzV1 = gjH_kaqzV1 + ?channel= + request(channel) };
              $(#downFrame)[attr](src, gjH_kaqzV1);                
              return false;
          }
      }
</code></pre>

<p>```</p>

<p><code>lDGyJ1</code>是什么呢？往前一点有这么一段代码：</p>

<p>```
var lDGyJ1 = 0;
var zfd2 = navigator[userAgent]<a href="">toLowerCase</a>;
if (zfd2<a href="iphone">indexOf</a> > 0 || zfd2<a href="ipod">indexOf</a> > 0 ||zfd2<a href="ipad">indexOf</a> > 0 || zfd2<a href="symbianos">indexOf</a> > 0 || zfd2<a href="ios">indexOf</a> > 0)
{</p>

<pre><code>lDGyJ1 = 1;
</code></pre>

<p>}
```</p>

<p>没错网站正是通过判断当前浏览器<strong>userAgent</strong>，用<code>lDGyJ1</code>来标记当前浏览器是否为iOS设备。</p>

<p>在<code>install</code>方法中，当<code>lDGyJ1</code>不为0时(即当然为iOS设备)，则跳转至：</p>

<pre><code>http://server.tongbu.com/cloud/downapp.aspx?channel=channel
</code></pre>

<p>在浏览器输入上述网址，发现又跳转到：</p>

<pre><code>itms-services://?action=download-manifest&amp;url=http://tui.tongbu.com/channel/tbtui_v1.12_online.plist
</code></pre>

<p>上述地址正是一键安装玄机所在，而核心则是itms-services协议跟plist配置文件。</p>

<p>itms-services协议实际上常用于iOS企业应用的无线部署，详见<a href="https://help.apple.com/iosdeployment-apps/#app43ad871e">这里</a>!</p>

<p>plist配置文件实为一个xml清单文件，其内容大概如下：</p>

<p>```
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
   <key>items</key>
   <array></p>

<pre><code>   &lt;dict&gt;
       &lt;key&gt;assets&lt;/key&gt;
       &lt;array&gt;
           &lt;dict&gt;
               &lt;key&gt;kind&lt;/key&gt;
               &lt;string&gt;software-package&lt;/string&gt;
               &lt;key&gt;url&lt;/key&gt;
               &lt;string&gt;http://t.tongbu.com/tbtui/channel/tbtui_v1.12_online.ipa&lt;/string&gt;
           &lt;/dict&gt;
           &lt;dict&gt;
               &lt;key&gt;kind&lt;/key&gt;
               &lt;string&gt;display-image&lt;/string&gt;
               &lt;key&gt;needs-shine&lt;/key&gt;
               &lt;true/&gt;
               &lt;key&gt;url&lt;/key&gt;
               &lt;string&gt;http://www.tongbu.com/logo/tui48.png&lt;/string&gt;
           &lt;/dict&gt;
       &lt;/array&gt;
       &lt;key&gt;metadata&lt;/key&gt;
       &lt;dict&gt;
           &lt;key&gt;bundle-identifier&lt;/key&gt;
           &lt;string&gt;com.tongbu.tbtui&lt;/string&gt;
           &lt;key&gt;bundle-version&lt;/key&gt;
           &lt;string&gt;1.12&lt;/string&gt;
           &lt;key&gt;kind&lt;/key&gt;
           &lt;string&gt;software&lt;/string&gt;
           &lt;key&gt;subtitle&lt;/key&gt;
           &lt;string&gt;同步网络&lt;/string&gt;
           &lt;key&gt;title&lt;/key&gt;
           &lt;string&gt;同步推1.12（需越狱）online&lt;/string&gt;
       &lt;/dict&gt;
   &lt;/dict&gt;
</code></pre>

<p>   </array>
</dict>
</plist>
```</p>

<p>至此，我们只要稍稍修改上面的plist文件，便可实现自己的一键安装。需要修改的地方主要有：</p>

<ol>
<li><p>&lt;key>assets里两个<em>url</em>，即<em>software-package</em>和<em>display-image</em>的URL，前者是所要安装的IPA地址，后者是安装时桌面显示的图标。</p></li>
<li><p>&lt;key>metadata里主要修改<em>bundle-identifier</em>和<em>bundle-version</em>，具体是什么就不用介绍了，但是要注意一定要跟所安装的IPA包内容一致，不然无法安装成功。另外可以修改<em>title</em>和<em>subtitle</em>，定制安装时弹出框的内容。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[越狱iOS设备实现IPA的安装]]></title>
    <link href="http://kryhear.github.com/blog/2012/06/27/how-to-install-ipa-with-a-jailbrbreak-ios-device-by-program/"/>
    <updated>2012-06-27T15:17:00+08:00</updated>
    <id>http://kryhear.github.com/blog/2012/06/27/how-to-install-ipa-with-a-jailbrbreak-ios-device-by-program</id>
    <content type="html"><![CDATA[<p>我想，大多数人将手中的iOS设备（iPhone、iPad、iTouch）jailbreak后，除了进去Cydia安装各种插件后，也会安装诸如同步推、PP助手等第三方市场吧。我也不例外。</p>

<p>一直对于第三方市场怎样安装破解的IPA包表示好奇，恰好最近有朋友问起IPA安装的实现，于是想要一探究竟。</p>

<!-- more -->


<ul>
<li><p>鉴于之前打包deb安装包的经验，我觉得系统可能是调用一脚本，通过命令进行安装，类似dpkg命令。</p></li>
<li><p>通过解压缩软件打开IPA文件，明显发现其其实就是一个压缩包，事实上手动打包IPA时，也是按照一定目录结构压缩成zip，再改后缀名成ipa。鉴于这个事实，有可能是直接压缩到某系统目录（/var/mobile/Applications），当然还要想办法生成一串随机码作为上级目录。</p></li>
</ul>


<p>通过神奇的Google，发现原来iOS中，有一个负责管理IPA(安装、卸载等)的Framework，这便是Mobile Installation，通过IDA Pro可以发现该Framework有如下API：</p>

<p><img class="center" src="/images/post/MobileInstallationAPI.png"></p>

<p>其中，_MobileInstallationInstall就是用来安装IPA的。经过测试，模拟器和真机均可成功安装。好了，废话不多说，具体看<a href="https://github.com/kryhear/IPAInstaller">DEMO</a>。</p>
]]></content>
  </entry>
  
</feed>
